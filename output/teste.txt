tmp(0)	 := LDI & "000000000"; -- LDI $0  	Carrega o acumulador com o valor 0
tmp(1)	 := STA & "000000000"; -- STA @0  	Armazena o valor do acumulador em MEM[0] (constante 0)
tmp(2)	 := STA & "000000010"; -- STA @2  	Armazena o valor do acumulador em MEM[2] (contador)
tmp(3)	 := LDI & "000000001"; -- LDI $1  	Carrega o acumulador com o valor 1
tmp(4)	 := STA & "000000001"; -- STA @1  	Armazena o valor do acumulador em MEM[1] (constante 1)
tmp(5)	 := NOP & "000000000"; -- NOP #  
tmp(6)	 := LDA & "101100001"; -- LDA @353  		Carrega o acumulador com a leitura do botão KEY0
tmp(7)	 := STA & "100100000"; -- STA @288  		Armazena o valor lido em HEX0 (para verificar erros de leitura)
tmp(8)	 := CEQ & "000000000"; -- CEQ @0  	Compara com o valor de MEM[0] (constante 0)
tmp(9)	 := JEQ & "000001011"; -- JEQ @11  	Desvia se igual a 0 (botão não foi pressionado)
tmp(10)	 := JSR & "000001101"; -- JSR @13  		O botão foi pressionado, chama a sub-rotina de incremento
tmp(11)	 := NOP & "000000000"; -- NOP #  	Retorno da sub-rotina de incremento
tmp(12)	 := JMP & "000000101"; -- JMP @5  	Fecha o laço principal, faz uma nova leitura de KEY0		
tmp(13)	 := STA & "111111110"; -- STA @510  		Limpa a leitura do botão
tmp(14)	 := LDA & "000000010"; -- LDA @2  	Carrega o valor de MEM[2] (contador)
tmp(15)	 := SOMA & "000000001"; -- SOMA @1  		Soma com a constante em MEM[1]
tmp(16)	 := STA & "000000010"; -- STA @2  	Salva o incremento em MEM[2] (contador)
tmp(17)	 := STA & "100000010"; -- STA @258  		Armazena o valor do bit0 do acumulador no LDR9
tmp(18)	 := STA & "100100101"; -- STA @293  		Armazena o valor do acumulador no HEX5
tmp(19)	 := RET & "000000000"; -- RET #  
