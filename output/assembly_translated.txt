tmp(0)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com o valor 0
tmp(1)	 := STA & "111111110"; -- STA @510   Limpa KEY1
tmp(2)	 := STA & "111111111"; -- STA @511   Limpa KEY0
tmp(3)	 := STA & "100100000"; -- STA @288   Armazena o valor do acumulador em HEX0
tmp(4)	 := STA & "100100001"; -- STA @289   Armazena o valor do acumulador em HEX1
tmp(5)	 := STA & "100100010"; -- STA @290   Armazena o valor do acumulador em HEX2
tmp(6)	 := STA & "100100011"; -- STA @291   Armazena o valor do acumulador em HEX3
tmp(7)	 := STA & "100100100"; -- STA @292   Armazena o valor do acumulador em HEX4
tmp(8)	 := STA & "100100101"; -- STA @293   Armazena o valor do acumulador em HEX5
tmp(9)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com o valor 0
tmp(10)	 := STA & "100000000"; -- STA @256   Aramzena o valor do bit0 do acumulador no LDR0 ~ LDR7
tmp(11)	 := STA & "100000001"; -- STA @257   Aramzena o valor do bit0 do acumulador no LDR8
tmp(12)	 := STA & "100000010"; -- STA @258   Aramzena o valor do bit0 do acumulador no LDR9
tmp(13)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com o valor 0
tmp(14)	 := STA & "000000000"; -- STA @0   Armazena o valor do acumulador em MEM[0] (constante 0)
tmp(15)	 := LDI & "000000001"; -- LDI $1   Carrega  acumulador com o valor 1
tmp(16)	 := STA & "000000001"; -- STA @1   Armazena o valor do acumulador em MEM[1] (constante 1)
tmp(17)	 := LDI & "000001010"; -- LDI $10   Carrega  acumulador com o valor 10
tmp(18)	 := STA & "000000010"; -- STA @2   Armazena o valor do acumulador em MEM[2] (constante 10)
tmp(19)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com o valor 0
tmp(20)	 := STA & "000000011"; -- STA @3   Armazena o valor do acumulador em MEM[3] (unidade)
tmp(21)	 := STA & "000000100"; -- STA @4   Armazena o valor do acumulador em MEM[4] (dezena)
tmp(22)	 := STA & "000000101"; -- STA @5   Armazena o valor do acumulador em MEM[5] (centena)
tmp(23)	 := STA & "000000110"; -- STA @6   Armazena o valor do acumulador em MEM[6] (unidade de milhar)
tmp(24)	 := STA & "000000111"; -- STA @7   Armazena o valor do acumulador em MEM[7] (dezena de milhar)
tmp(25)	 := STA & "000001000"; -- STA @8   Armazena o valor do acumulador em MEM[8] (centena de milhar)
tmp(26)	 := LDI & "000001001"; -- LDI $9   Carrega acumulador com o valor 9
tmp(27)	 := STA & "000001001"; -- STA @9   Armazena o valor do acumulador em MEM[9] (limite de unidade)
tmp(28)	 := STA & "000001010"; -- STA @10   Armazena o valor do acumulador em MEM[10] (limite de dezena)
tmp(29)	 := STA & "000001011"; -- STA @11   Armazena o valor do acumulador em MEM[11] (limite de centena)
tmp(30)	 := STA & "000001100"; -- STA @12   Armazena o valor do acumulador em MEM[12] (limite de unidade de milhar)
tmp(31)	 := STA & "000001101"; -- STA @13   Armazena o valor do acumulador em MEM[13] (limite de dezena de milhar)
tmp(32)	 := STA & "000001110"; -- STA @14   Armazena o valor do acumulador em MEM[14] (limite de centena de milhar)
tmp(33)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com valor 0
tmp(34)	 := STA & "000001111"; -- STA @15   Grava valor 0 em MEM[15] (flag de inibir contagem)
tmp(35)	 := LDA & "000001111"; -- LDA @15   Carrega acumulador com valor da flag de inibir contagem -------------- ROTINA PRINCIPAL (35)
tmp(36)	 := CEQ & "000000000"; -- CEQ @0   Compara flag de inibir contagem com 0
tmp(37)	 := JEQ & "000100111"; -- JEQ @39   Se for igual, prossegue com a verificação das KEYs
tmp(38)	 := JSR & "001101000"; -- JSR @104   Inibir contagem ativa, desvia para o fim do programa
tmp(39)	 := LDA & "101100000"; -- LDA @352   Carrega no acumulador o valor de KEY0 ------------ Inicia KEY0
tmp(40)	 := CEQ & "000000000"; -- CEQ @0   Compara com o valor 0
tmp(41)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com valor 0
tmp(42)	 := STA & "111111111"; -- STA @511   Limpa leitura de KEY0
tmp(43)	 := JEQ & "000101101"; -- JEQ @45   Pula para leitura de KEY1 se KEY0 não foi pressionado
tmp(44)	 := JSR & "000110100"; -- JSR @52   Se KEY0 foi pressionado, segue para sub-rotina de incremento
tmp(45)	 := LDA & "101100001"; -- LDA @353   Carrega no acumulador o valor de KEY1 ------------ Inicia KEY1
tmp(46)	 := CEQ & "000000000"; -- CEQ @0   Compara com 0
tmp(47)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com 0
tmp(48)	 := STA & "111111110"; -- STA @510   Limpa leitura de KEY1
tmp(49)	 := JEQ & "000100011"; -- JEQ @35   Se KEY1 não foi pressionado, retorna ao loop principal
tmp(50)	 := JSR & "001001110"; -- JSR @78   Se KEY1 foi pressionado, segue para sub-rotina de configuração de limite
tmp(51)	 := JMP & "000100011"; -- JMP @35   Ao retornar da sub-rotina, volta ao loop principal
tmp(52)	 := LDA & "000001001"; -- LDA @9   Carrega no acumulador o limite das unidades --------------------- ROTINA INCREMENTO (52)
tmp(53)	 := CEQ & "000000011"; -- CEQ @3   Compara unidade com seu respectivo limite
tmp(54)	 := JEQ & "000111000"; -- JEQ @56   Se for igual, verifica as dezenas
tmp(55)	 := JMP & "000111011"; -- JMP @59   Se não for igual, segue direto para a parte de incrementa
tmp(56)	 := LDA & "000001010"; -- LDA @10   Carrega no acumulador o limite das dezenas
tmp(57)	 := CEQ & "000000100"; -- CEQ @4   Compara dezena com seu respectivo limite
tmp(58)	 := JEQ & "001101000"; -- JEQ @104   Se for igual, pula para o fim do programa (houve estouro)
tmp(59)	 := LDA & "000000011"; -- LDA @3   Carrega no acumulador o valor das unidades -------- incrementa unidade
tmp(60)	 := SOMA & "000000001"; -- SOMA @1   Soma um nesse valor
tmp(61)	 := STA & "000000011"; -- STA @3   Atualiza o valor das unidades na memória
tmp(62)	 := STA & "100100000"; -- STA @288   Atualiza o valor do display hexadecimal das unidades
tmp(63)	 := LDA & "000000010"; -- LDA @2   Carrega no acumulador o valor 10
tmp(64)	 := CEQ & "000000011"; -- CEQ @3   Compara unidades com 10
tmp(65)	 := JEQ & "001000011"; -- JEQ @67   Se estourou as unidades, atualiza
tmp(66)	 := RET & "000000000"; -- RET #   Se não estourou, retorna ao loop principal
tmp(67)	 := LDI & "000000000"; -- LDI $0   Houve estouro de unidades => Carrega acumulador com 0
tmp(68)	 := STA & "000000011"; -- STA @3   Grava 0 no contador das unidades
tmp(69)	 := STA & "100100000"; -- STA @288   Grava 0 no display hexadecimal das unidades
tmp(70)	 := LDA & "000000100"; -- LDA @4   Carrega no acumulador o valor das DEZENAS ----------- incrementa dezena
tmp(71)	 := SOMA & "000000001"; -- SOMA @1   Soma um nesse valor
tmp(72)	 := STA & "000000100"; -- STA @4   Atualiza o valor das dezenas na memória
tmp(73)	 := STA & "100100001"; -- STA @289   Atualiza o valor do display hexadecimal das dezenas
tmp(74)	 := LDA & "000000010"; -- LDA @2   Carrega no acumulador o valor 10
tmp(75)	 := CEQ & "000000100"; -- CEQ @4   Compara dezenas com 10
tmp(76)	 := JEQ & "001101000"; -- JEQ @104   Se estourou as dezenas, estourou o limite => vai para o final do programa
tmp(77)	 := RET & "000000000"; -- RET #   Se não estourou, retorna ao loop principal
tmp(78)	 := LDA & "101100001"; -- LDA @353   Carrega o valor de KEY1 no acumulador ---------------------------- ROTINA CONFIGURAÇÃO DE LIMITE (78)
tmp(79)	 := CEQ & "000000000"; -- CEQ @0   Compara KEY1 com 0
tmp(80)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com 0
tmp(81)	 := STA & "111111110"; -- STA @510   Limpa KEY1
tmp(82)	 := JEQ & "001001110"; -- JEQ @78   Se for igual (não pressionado), volta à leitura de KEY1
tmp(83)	 := LDA & "101000000"; -- LDA @320   Carrega no acumulador o valor de SW07 (considere que vai de 0 a 9)
tmp(84)	 := STA & "000001001"; -- STA @9   Grava leitura das chaves na memória para limite das unidades
tmp(85)	 := LDI & "000000001"; -- LDI $1   Carrega 1 no acumulador
tmp(86)	 := STA & "100000000"; -- STA @256   Grava em LEDR07 para confirmar primeira configuração
tmp(87)	 := LDA & "101100001"; -- LDA @353   Carrega o valor de KEY1 no acumulador ----- config. dezenas
tmp(88)	 := CEQ & "000000000"; -- CEQ @0   Compara KEY1 com 0
tmp(89)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com 0
tmp(90)	 := STA & "111111110"; -- STA @510   Limpa KEY1
tmp(91)	 := JEQ & "001010111"; -- JEQ @87   Se for igual (não pressionado), volta à leitura de KEY1
tmp(92)	 := LDA & "101000000"; -- LDA @320   Carrega no acumulador o valor de SW07 (considere que vai de 0 a 9)
tmp(93)	 := STA & "000001010"; -- STA @10   Grava leitura das chaves na memória para limite das dezenas
tmp(94)	 := LDI & "000000011"; -- LDI $3   Carrega 3 no acumulador
tmp(95)	 := STA & "100000000"; -- STA @256   Grava em LEDR07 para confirmar segunda configuração
tmp(96)	 := LDA & "101100001"; -- LDA @353   Carrega o valor de KEY1 no acumulador ----- pressionar para retornar ao loop
tmp(97)	 := CEQ & "000000000"; -- CEQ @0   Compara KEY1 com 0
tmp(98)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com 0
tmp(99)	 := STA & "111111110"; -- STA @510   Limpa KEY1
tmp(100)	 := JEQ & "001100000"; -- JEQ @96   Se for igual (não pressionado), volta à leitura de KEY1
tmp(101)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com 0
tmp(102)	 := STA & "100000000"; -- STA @256   Grava nos LEDR07 (apaga os LEDs)
tmp(103)	 := RET & "000000000";
tmp(104)	 := LDI & "000000001"; -- LDI $1   Carrega acumulador com 1 --------------------------- FIM DO PROGRAMA (101)
tmp(105)	 := STA & "100000010"; -- STA @258   Grava valor no LEDR9 (acende o LEDR9)
tmp(106)	 := NOP & "000000000";
tmp(107)	 := JMP & "001100100"; -- JMP @100   Fim. Fica preso neste laço.
