tmp(0)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com o valor 0
tmp(1)	 := NOP & "000000000";
tmp(2)	 := STA & "111111111";
tmp(3)	 := STA & "100100000"; -- STA @288   Armazena o valor do acumulador em HEX0
tmp(4)	 := STA & "100100001"; -- STA @289   Armazena o valor do acumulador em HEX1
tmp(5)	 := STA & "100100010"; -- STA @290   Armazena o valor do acumulador em HEX2
tmp(6)	 := STA & "100100011"; -- STA @291   Armazena o valor do acumulador em HEX3
tmp(7)	 := STA & "100100100"; -- STA @292   Armazena o valor do acumulador em HEX4
tmp(8)	 := STA & "100100101"; -- STA @293   Armazena o valor do acumulador em HEX5
tmp(9)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com o valor 0
tmp(10)	 := STA & "100000000"; -- STA @256   Aramzena o valor do bit0 do acumulador no LDR0 ~ LDR7
tmp(11)	 := STA & "100000001"; -- STA @257   Aramzena o valor do bit0 do acumulador no LDR8
tmp(12)	 := STA & "100000010"; -- STA @258   Aramzena o valor do bit0 do acumulador no LDR9
tmp(13)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com o valor 0
tmp(14)	 := STA & "000000000"; -- STA @0   Armazena o valor do acumulador em MEM[0] (constante 0)
tmp(15)	 := LDI & "000000001"; -- LDI $1   Carrega  acumulador com o valor 1
tmp(16)	 := STA & "000000001"; -- STA @1   Armazena o valor do acumulador em MEM[1] (constante 1)
tmp(17)	 := LDI & "000001010"; -- LDI $10   Carrega  acumulador com o valor 10
tmp(18)	 := STA & "000000010"; -- STA @2   Armazena o valor do acumulador em MEM[2] (constante 10)
tmp(19)	 := LDI & "000000000"; -- LDI $0   Carrega acumulador com o valor 0
tmp(20)	 := STA & "000000011"; -- STA @3   Armazena o valor do acumulador em MEM[3] (unidade)
tmp(21)	 := STA & "000000100"; -- STA @4   Armazena o valor do acumulador em MEM[4] (dezena)
tmp(22)	 := STA & "000000101"; -- STA @5   Armazena o valor do acumulador em MEM[5] (centena)
tmp(23)	 := STA & "000000110"; -- STA @6   Armazena o valor do acumulador em MEM[6] (unidade de milhar)
tmp(24)	 := STA & "000000111"; -- STA @7   Armazena o valor do acumulador em MEM[7] (dezena de milhar)
tmp(25)	 := STA & "000001000"; -- STA @8   Armazena o valor do acumulador em MEM[8] (centena de milhar)
tmp(26)	 := LDI & "000001001"; -- LDI $9   Carrega acumulador com o valor 9
tmp(27)	 := STA & "000001001"; -- STA @9   Armazena o valor do acumulador em MEM[9] (limite de unidade)
tmp(28)	 := STA & "000001010"; -- STA @10   Armazena o valor do acumulador em MEM[10] (limite de dezena)
tmp(29)	 := STA & "000001011"; -- STA @11   Armazena o valor do acumulador em MEM[11] (limite de centena)
tmp(30)	 := STA & "000001100"; -- STA @12   Armazena o valor do acumulador em MEM[12] (limite de unidade de milhar)
tmp(31)	 := STA & "000001101"; -- STA @13   Armazena o valor do acumulador em MEM[13] (limite de dezena de milhar)
tmp(32)	 := STA & "000001110"; -- STA @14   Armazena o valor do acumulador em MEM[14] (limite de centena de milhar)
tmp(33)	 := LDA & "101100000"; -- LDA @352   Carrega acumulador com valor de KEY0 -------------- ROTINA PRINCIPAL
tmp(34)	 := CEQ & "000000000"; -- CEQ @0   Verifica se KEY0 está solto (0 => solto, 1 => pressionado)
tmp(35)	 := LDI & "000000000"; -- LDI $0   Carrega 0 no acumulador
tmp(36)	 := STA & "111111111"; -- STA @511   Limpa leitura de KEY0
tmp(37)	 := JEQ & "000100001"; -- JEQ @33   Volta pro início se botão 0 não foi pressionado
tmp(38)	 := JSR & "000101000"; -- JSR @40   Pula para sub-rotina de incremento
tmp(39)	 := JMP & "000100001"; -- JMP @33   Volta pro início ao retornar da sub-rotina
tmp(40)	 := LDA & "000000011"; -- LDA @3   Carrega no acumulador o valor das unidades ----------- SUB-ROTINA DE INCREMENTO (unidades)
tmp(41)	 := SOMA & "000000001"; -- SOMA @1   Soma um nesse valor
tmp(42)	 := STA & "000000011"; -- STA @3   Atualiza o valor das unidades na memória
tmp(43)	 := STA & "100100000"; -- STA @288   Atualiza o valor do display hexadecimal das unidades
tmp(44)	 := LDA & "000000010"; -- LDA @2   Carrega no acumulador o valor 10
tmp(45)	 := CEQ & "000000011"; -- CEQ @3   Compara unidades com 10
tmp(46)	 := JEQ & "000110000"; -- JEQ @48   Se estourou as unidades, atualiza
tmp(47)	 := RET & "000000000";
tmp(48)	 := LDI & "000000000"; -- LDI $0   Carrega 0 no acumulador
tmp(49)	 := STA & "000000011"; -- STA @3   Grava 0 no contador das unidades
tmp(50)	 := STA & "100100000"; -- STA @288   Grava 0 no display hexadecimal das unidades
tmp(51)	 := LDA & "000000100"; -- LDA @4   Carrega no acumulador o valor das DEZENAS ----------- SUB-ROTINA DE INCREMENTO (dezenas)
tmp(52)	 := SOMA & "000000001"; -- SOMA @1   Soma um nesse valor
tmp(53)	 := STA & "000000100"; -- STA @4   Atualiza o valor das dezenas na memória
tmp(54)	 := STA & "100100001"; -- STA @289   Atualiza o valor do display hexadecimal das dezenas
tmp(55)	 := LDA & "000000010"; -- LDA @2   Carrega no acumulador o valor 10
tmp(56)	 := CEQ & "000000100"; -- CEQ @4   Compara dezenas com 10
tmp(57)	 := JEQ & "000110000"; -- JEQ @48   Se estourou as dezenas, atualiza
tmp(58)	 := RET & "000000000";
tmp(59)	 := LDI & "000000000"; -- LDI $0   Carrega 0 no acumulador
tmp(60)	 := STA & "000000100"; -- STA @4   Grava 0 no contador das dezenas
tmp(61)	 := STA & "100100001"; -- STA @289   Grava 0 no display hexadecimal das dezenas
tmp(62)	 := RET & "000000000";
